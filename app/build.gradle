apply plugin: 'com.android.application'

android {
    signingConfigs {
        Properties keyProps = new Properties()
        keyProps.load(new FileInputStream(file('keystore.properties')))

        debug {
            storeFile file(keyProps["store"])
            keyAlias keyProps["alias"]
            storePassword keyProps["storePass"]
            keyPassword keyProps["pass"]
        }
        release {
            storeFile file(keyProps["store"])
            keyAlias keyProps["alias"]
            storePassword keyProps["storePass"]
            keyPassword keyProps["pass"]
        }
    }

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId rootProject.ext.applicationId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        multiDexEnabled true
        ndk {
            // 设置支持的 SO 库构架，一般而言，取你所有的库支持的构架的`交集`。
            abiFilters 'armeabi', 'armeabi-v7a' // 'armeabi-v7a', 'arm64-v8a', , 'mips', 'mips64'
        }
    }
    buildTypes {

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    productFlavors {
        oppo {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "oppo"]
        }
        vivo {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "vivo"]
        }
        huawei {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "huawei"]
        }
        baidu {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "baidu"]
        }
        samsung {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "samsung"]
        }
        sogou {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "sogou"]
        }
        xiaomi {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "xiaomi"]
        }
        lenovo {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "lenovo"]
        }
        meizu {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "meizu"]
        }
        qihu360 {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "qihu360"]
        }
        ali {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "ali"]
        }
        yingyongbao{
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "yingyongbao"]
        }
        common {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "common"]
        }
        chuizi{
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "chuizi"]
        }
        anzhi{
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "anzhi"]
        }
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "https://maven.google.com"
    }
    maven { url "https://jitpack.io" }
    maven { url 'https://dl.bintray.com/drummer-aidan/maven' }
}


apply plugin: 'com.google.protobuf'
protobuf {
    //这里配置protoc编译器
    protoc {
        artifact = 'com.google.protobuf:protoc:3.0.0-alpha-3'
    }
    plugins {
        javalite {
            // The codegen for lite comes as a separate artifact
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
    }
    //这里配置生成目录，编译后会在build的目录下生成对应的java文件
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                javalite {}
            }
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.xwang:commlib:1.0.6'

    compile 'com.aurelhubert:ahbottomnavigation:2.1.0'


    compile 'com.android.support:multidex:1.0.1'
    compile 'com.android.support:appcompat-v7:26.0.1'
    compile 'com.android.support:recyclerview-v7:26.0.1'
    compile 'com.android.support:support-v4:26.0.1'

    compile 'com.android.support:percent:26.0.1'
    compile 'com.jakewharton:butterknife:8.7.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    compile 'com.tencent.ilivesdk:ilivesdk:1.7.2'
    compile 'com.tencent.livesdk:livesdk:1.1.4'
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.3.0'
    compile 'com.tencent.mm.opensdk:wechat-sdk-android-with-mta:1.1.6'
    compile 'cn.pedant.sweetalert:library:1.3'
    compile 'org.greenrobot:eventbus:3.0.0'
    compile 'com.alibaba:fastjson:1.2.37'
    compile 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.22'
    compile 'com.squareup.okhttp3:logging-interceptor:3.8.1'
    compile('cn.qqtheme.framework:WheelPicker:1.5.4') {
        exclude group: 'com.android.support'
    }
    compile 'com.bugtags.library:bugtags-lib:latest.integration'
    compile 'com.linsea:opendanmaku:1.0.0@aar'
    compile 'com.youth.banner:banner:1.4.10'
    //最新版本
    compile 'com.tencent.bugly:crashreport_upgrade:latest.release'
    //其中latest.release指代最新版本号，也可以指定明确的版本号，例如1.2.0
    compile 'com.qiniu:qiniu-android-sdk:7.3.+'
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3'
    compile 'com.umeng.analytics:analytics:latest.integration'
    compile 'com.google.protobuf:protobuf-lite:3.0.0'
    compile 'com.scwang.smartrefresh:SmartRefreshLayout:1.0.1'

    compile 'com.r0adkll:slidableactivity:2.0.5'

}
